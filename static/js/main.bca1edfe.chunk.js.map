{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/robots.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","class","style","overflowY","height","children","App","onSearchChange","event","setState","target","value","state","this","filterRobots","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACxB,OAEE,yBAAKC,UAAU,qDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA4BH,EAA5B,cACrB,6BACE,4BAAKF,GACL,2BAAIC,MCUGK,EAhBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACZC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACrC,OAAS,kBAAC,EAAD,CACTC,IAAMD,EACNT,GAAIK,EAAOI,GAAGT,GACdF,KAAQO,EAAOI,GAAGX,KAClBC,MAASM,EAAOI,GAAGV,WAGrB,OACE,6BACKO,ICdID,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,gBACNa,SAAU,OACVZ,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNa,SAAU,YACVZ,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,WACVZ,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,WACVZ,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,SACVZ,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNa,SAAU,mBACVZ,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNa,SAAU,eACVZ,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNa,SAAU,gBACVZ,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNa,SAAU,WACVZ,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNa,SAAU,iBACVZ,MAAO,2BC7CIa,EAZG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC9B,OACE,yBAAKb,UAAU,OACb,2BACAA,UAAY,sCACZc,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCCHI,G,MARA,SAACC,GACd,OACE,yBAAKC,MAAM,cAAaC,MAAO,CAACC,UAAU,SAAUC,OAAO,UACxDJ,EAAMK,SADT,OC0CWC,E,kDAhCb,aAAc,IAAD,8BACX,gBAWFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACf,YAAYc,EAAME,OAAOC,SAXxC,EAAKC,MAAQ,CACX1B,OAAO,GACPQ,YAAY,IAJH,E,gEASbmB,KAAKJ,SAAS,CAACvB,OAAOA,M,+BAOb,IAAD,OACA4B,EAAeD,KAAKD,MAAM1B,OAAO6B,QAAO,SAAAC,GAC5C,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS,EAAKN,MAAMlB,YAAYuB,kBAElE,OACE,yBAAKnC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAckB,KAAKN,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUrB,OAAQ4B,U,GA1BRK,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bca1edfe.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id})=>{\r\n  return(\r\n\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow\">\r\n      <img alt=\"robots\" src = {`https://robohash.org/${id}?200x200`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card.js\"\r\n\r\nconst CardList = ({ robots }) =>{\r\n  const cardComponent = robots.map((user,i)=>{\r\n    return  (<Card\r\n    key ={i}\r\n    id={robots[i].id}\r\n    name = {robots[i].name}\r\n    email = {robots[i].email}/>\r\n    );\r\n  })\r\n  return(\r\n    <div>\r\n        {cardComponent}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;\r\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n  return(\r\n    <div className=\"pa2\">\r\n      <input\r\n      className = \"tc pa3 ba b--green bg-lightest-blue\"\r\n      type=\"search\"\r\n      placeholder=\"search robots\"\r\n      onChange = {searchChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n  return (\r\n    <div class=\"innerScroll\"style={{overflowY:'scroll', height:\"500px\" }}>\r\n      {props.children};\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll\r\n","import React, {Component} from \"react\";\r\nimport CardList from \"../Components/CardList\";\r\nimport {robots} from \"../Components/robots\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\nimport './App.css';\r\nimport Scroll from \"../Components/Scroll\";\r\n\r\n// STATE >> props\r\n\r\nconst state = {\r\n\r\n}\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      robots:[],\r\n      searchfield:\"\"\r\n    }\r\n  }\r\n\r\ncomponentDidMount(){\r\n  this.setState({robots:robots})\r\n}\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchfield:event.target.value})\r\n\r\n  }\r\n  render(){\r\n    const filterRobots = this.state.robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    return(\r\n      <div className=\"tc\">\r\n      <h1 className=\"f2\">RoboFriends</h1>\r\n      <SearchBox searchChange={this.onSearchChange}/>\r\n      <Scroll>\r\n        <CardList robots={filterRobots}/>\r\n      </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from \"./Components/robots\"\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}